{% extends 'base.html.twig' %} {% block title %}Flight Details{% endblock %} {% block body %}
<div class="container mx-auto px-4 mt-8 space-y-6">
    <h1 class="text-5xl font-bold mb-6 text-gray-900 dark:text-white">Flight Details</h1>

    <!-- Flight Details Section -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <h2 class="text-2xl font-semibold mb-4 text-gray-900 dark:text-white">Flight Information</h2>
        <div class="grid gap-6 md:grid-cols-2">
            <div class="flex items-center space-x-4">
                <i class="fa fa-plane text-blue-500 text-2xl"></i>
                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Title</p>
                    <p class="text-lg font-medium text-gray-900 dark:text-white">{{ voyage.titre }}</p>
                </div>
            </div>
            <div class="flex items-center space-x-4">
                <i class="fa fa-map-marker-alt text-green-500 text-2xl"></i>
                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Destination</p>
                    <p class="text-lg font-medium text-gray-900 dark:text-white">{{ voyage.destination }}</p>
                </div>
            </div>
            <div class="flex items-center space-x-4">
                <i class="fa fa-plane-departure text-yellow-500 text-2xl"></i>
                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Departure Date</p>
                    <p class="text-lg font-medium text-gray-900 dark:text-white">{{ voyage.dateDepart|date('d-m-Y') }}</p>
                </div>
            </div>
            <div class="flex items-center space-x-4">
                <i class="fa fa-plane-arrival text-purple-500 text-2xl"></i>
                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Return Date</p>
                    <p class="text-lg font-medium text-gray-900 dark:text-white">{{ voyage.dateRetour|date('d-m-Y') }}</p>
                </div>
            </div>
            <div class="flex items-center space-x-4">
                <i class="fas fa-money-bill-wave text-2xl text-green-600 dark:text-green-400"></i>
                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Price</p>
                    <p class="text-lg font-medium text-gray-900 dark:text-white">{{ voyage.prix }} â‚¬</p>
                </div>
            </div>
            <div class="flex items-center space-x-4">
                <i class="fa fa-users text-indigo-500 text-2xl"></i>
                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Available Places</p>
                    <p class="text-lg font-medium text-gray-900 dark:text-white">{{ voyage.placesDisponibles }}</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Reservation Form Section -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <form method="post" action="{{ path('app_reserve_flight', {id: voyage.offresVoyageId}) }}" class="space-y-4">
            <h2 class="text-2xl font-semibold mb-4 text-gray-900 dark:text-white">Make a Reservation</h2>
            <div>
                <label for="nbrPlace" class="block text-base font-medium text-gray-700 dark:text-gray-400 mb-2">Number of Seats:</label>
                <input
                    type="number"
                    id="nbrPlace"
                    name="nbrPlace"
                    class="block w-full rounded-lg border border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
            </div>
            <div>
                <label for="promoCode" class="block text-base font-medium text-gray-700 dark:text-gray-400 mb-2">Promo Code:</label>
                <input
                    type="text"
                    id="promoCode"
                    name="promoCode"
                    class="block w-full rounded-lg border border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
            </div>
            <div id="error-messages" class="text-red-500 dark:text-red-400"></div>
            {% for message in app.flashes('error') %}
            <div class="text-red-500 dark:text-red-400">{{ message }}</div>
            {% endfor %} {% for message in app.flashes('success') %}
            <div class="text-green-500 dark:text-green-400">{{ message }}</div>
            {% endfor %} {% for message in app.flashes('info') %}
            <div class="text-blue-500 dark:text-blue-400">{{ message }}</div>
            {% endfor %}
            <button type="submit" class="bg-blue-600 dark:bg-blue-700 hover:bg-blue-700 dark:hover:bg-blue-800 text-white font-medium py-2 px-4 rounded-lg shadow">
                Reserve Now
            </button>
        </form>
        {% if reservationId is defined and reservationId is not empty %}
        <div class="mt-6">
            <h2 class="text-lg font-medium text-gray-700 dark:text-gray-300">Your reservation was successful!</h2>
            <p class="text-gray-600 dark:text-gray-400">You can now download your reservation details as a PDF or email it to yourself.</p>
            <div class="mt-4 flex space-x-4">
                <form method="post" target="_blank" action="{{ path('app_generate_pdf', {id: reservationId}) }}">
                    <button
                        type="submit"
                        class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg shadow"
                    >
                        Download PDF
                    </button>
                </form>
            </div>
        </div>
        {% endif %}
    </div>

    <!-- Back to Flights Button -->
    <div class="mt-4">
        <a
            href="{{ path('app_flights') }}"
            class="bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-800 dark:text-white font-medium py-2 px-4 rounded-lg"
        >
            Back to Flights
        </a>
    </div>
</div>
<script>
	const FlightDetailsApp = (() => {
		const CONFIG = {
			MIN_SEATS: 1,
		};

		const elements = {
			nbrPlace: document.getElementById("nbrPlace"),
			errorMessages: document.getElementById("error-messages"),
			form: document.querySelector("form"),
		};

		const Validator = {
			validateForm() {
				const errors = [];

				if (!elements.nbrPlace.value || parseInt(elements.nbrPlace.value) < CONFIG.MIN_SEATS) {
					errors.push(`Number of seats must be at least ${CONFIG.MIN_SEATS}.`);
				}

				elements.errorMessages.innerHTML = "";
				if (errors.length > 0) {
					elements.errorMessages.innerHTML = errors.map((error) => `<p class='text-red-500 dark:text-red-400'>${error}</p>`).join("");
					return false;
				}

				return true;
			},
		};

		const FormHandler = {
			submitForm(event) {
				if (!Validator.validateForm()) {
					event.preventDefault();
				}
			},
		};

		const init = () => {
			elements.form.addEventListener("submit", FormHandler.submitForm);
		};

		if (document.readyState === "loading") {
			document.addEventListener("DOMContentLoaded", init);
		} else {
			init();
		}

		return {
			validateForm: Validator.validateForm,
		};
	})();
	document.addEventListener("DOMContentLoaded", () => {
		const fromCurrencySelect = document.getElementById("fromCurrency");
		const toCurrencySelect = document.getElementById("toCurrency");
		const fromCurrencyValue = document.getElementById("fromCurrencyValue");
		const toCurrencyValue = document.getElementById("toCurrencyValue");
		const convertButton = document.getElementById("convertButton");

		async function fetchCurrencies() {
			try {
				const response = await fetch("/api/currencies");
				if (!response.ok) {
					console.error("Failed to fetch currencies: ", response.statusText);
					return;
				}

				const data = await response.json();
				const currenciesArray = data.supported_codes;

				currenciesArray.forEach((currencyPair) => {
					const option = document.createElement("option");
					option.value = currencyPair[0];
					option.textContent = `${currencyPair[0]} - ${currencyPair[1]}`;
					fromCurrencySelect.appendChild(option);
				});
			} catch (error) {
				console.error("Error fetching currencies: ", error);
			}
		}

		async function fetchCountryCurrencyCode(country) {
			if (!country) {
				console.error("Country is not provided.");
				return null;
			}

			console.log("Fetching currency code for country:", country); // Log the country parameter

			try {
				const response = await fetch("/api/country-currency", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({ country }),
				});

				if (!response.ok) {
					console.error("Failed to fetch country currency: ", response.statusText);
					return null;
				}

				const data = await response.json();
				return data.currency ? data.currency.code : null;
			} catch (error) {
				console.error("Error fetching country currency: ", error);
				return null;
			}
		}

		async function convertCurrency(amount, fromCurrency, toCurrency) {
			try {
				const response = await fetch("/api/convert-currency", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({ amount, fromCurrency, toCurrency }),
				});

				if (!response.ok) {
					console.error("Failed to convert currency: ", response.statusText);
					return null;
				}

				const data = await response.json();
				return data.convertedAmount || null;
			} catch (error) {
				console.error("Error converting currency: ", error);
				return null;
			}
		}

		async function initializeCurrencyConverter() {
			await fetchCurrencies();

			const destination = "{{ voyage.destination }}";
			if (!destination) {
				console.error("Destination is not defined.");
				return;
			}

			const destinationCurrencyCode = await fetchCountryCurrencyCode(destination);
			if (destinationCurrencyCode) {
				const option = document.createElement("option");
				option.value = destinationCurrencyCode;
				option.textContent = destinationCurrencyCode;
				toCurrencySelect.appendChild(option);
				toCurrencySelect.value = destinationCurrencyCode;
			}
		}

		convertButton.addEventListener("click", async () => {
			const fromCurrency = fromCurrencySelect.value;
			const toCurrency = toCurrencySelect.value;
			const amountText = fromCurrencyValue.value;

			if (!fromCurrency || !toCurrency || !amountText) {
				toCurrencyValue.textContent = "Please enter valid values.";
				return;
			}

			try {
				const amount = parseFloat(amountText);
				if (isNaN(amount)) {
					toCurrencyValue.textContent = "Invalid amount.";
					return;
				}

				const convertedAmount = await convertCurrency(amount, fromCurrency, toCurrency);
				if (convertedAmount !== null) {
					toCurrencyValue.textContent = `${convertedAmount.toFixed(2)} ${toCurrency}`;
				} else {
					toCurrencyValue.textContent = "Conversion failed.";
				}
			} catch (error) {
				toCurrencyValue.textContent = "An error occurred.";
				console.error(error);
			}
		});

		initializeCurrencyConverter();
	});
</script>
{% endblock %}
