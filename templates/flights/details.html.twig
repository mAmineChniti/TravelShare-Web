{% extends 'base.html.twig' %} {% block title %}Flight Details{% endblock %} {% block body %}
<div class="container mx-auto px-4 mt-8 space-y-6">
	<h1 class="text-5xl font-bold mb-6">{{ voyage.titre }}</h1>
	<div class="grid gap-6 md:grid-cols-2">
		<div class="space-y-4">
			<p class="text-base text-gray-700">Destination: <span class="font-medium">{{ voyage.destination }}</span></p>
			<p class="text-base text-gray-700">Description: <span class="font-medium">{{ voyage.description }}</span></p>
			<p class="text-base text-gray-700">Price: <span class="font-medium">{{ voyage.prix }} €</span></p>
		</div>
		<div class="space-y-4">
			<p class="text-base text-gray-700">
				Available Places: <span class="font-medium">{{ voyage.placesDisponibles }}</span>
			</p>
			<p class="text-base text-gray-700">
				Departure Date: <span class="font-medium">{{ voyage.dateDepart|date('d-m-Y') }}</span>
			</p>
			<p class="text-base text-gray-700">
				Return Date: <span class="font-medium">{{ voyage.dateRetour|date('d-m-Y') }}</span>
			</p>
		</div>
	</div>
	<div class="currency-converter bg-gray-100 p-4 rounded-lg shadow-md flex justify-between items-center space-x-4">
		<input id="fromCurrencyValue" type="text" class="w-32 rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" value="{{ voyage.prix }} €">
		<select id="fromCurrency" name="fromCurrency" class="w-32 rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"></select>
		<span id="toCurrencyValue" class="text-lg font-medium text-gray-800 text-center flex-grow"></span>
		<select id="toCurrency" name="toCurrency" class="w-32 rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"></select>
		<button id="convertButton" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg shadow">Convert</button>
	</div>
	<div class="bg-white rounded-lg shadow-md p-6">
		<form method="post" action="{{ path('app_reserve_flight', {id: voyage.offresVoyageId}) }}" class="space-y-4">
			<div>
				<label for="nbrPlace" class="block text-base font-medium text-gray-700 mb-2">Number of Seats:</label>
				<input
					type="number"
					id="nbrPlace"
					name="nbrPlace"
					class="block w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
				/>
			</div>
			<div>
				<label for="promoCode" class="block text-base font-medium text-gray-700 mb-2">Promo Code:</label>
				<input
					type="text"
					id="promoCode"
					name="promoCode"
					class="block w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
				/>
			</div>
			<div id="error-messages" class="text-red-500"></div>
			{% for message in app.flashes('error') %}
			<div class="text-red-500">{{ message }}</div>
			{% endfor %} {% for message in app.flashes('success') %}
			<div class="text-green-500">{{ message }}</div>
			{% endfor %} {% for message in app.flashes('info') %}
			<div class="text-blue-500">{{ message }}</div>
			{% endfor %}
			<button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg shadow">
				Reserve Now
			</button>
		</form>
		{% if reservationId is defined and reservationId is not empty %}
		<div class="mt-6">
			<h2 class="text-lg font-medium text-gray-700">Your reservation was successful!</h2>
			<p class="text-gray-600">You can now download your reservation details as a PDF or email it to yourself.</p>
			<div class="mt-4 flex space-x-4">
				<form method="post" target="_blank" action="{{ path('app_generate_pdf', {id: reservationId}) }}">
					<button
						type="submit"
						class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg shadow"
					>
						Download PDF
					</button>
				</form>
				<form method="post" action="{{ path('app_generate_pdf', {id: reservationId}) }}">
					<input
						type="email"
						name="email"
						placeholder="Enter your email"
						class="rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
						required
					/>
					<button
						type="submit"
						class="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-lg shadow"
					>
						Email PDF
					</button>
				</form>
			</div>
		</div>
		{% endif %}
	</div>
	<div class="mt-4">
		<a
			href="{{ path('app_flights') }}"
			class="bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-2 px-4 rounded-lg"
		>
			Back to Flights
		</a>
	</div>
</div>
<script>
	const FlightDetailsApp = (() => {
		const CONFIG = {
			MIN_SEATS: 1,
		};

		const elements = {
			nbrPlace: document.getElementById("nbrPlace"),
			errorMessages: document.getElementById("error-messages"),
			form: document.querySelector("form"),
		};

		const Validator = {
			validateForm() {
				const errors = [];

				if (!elements.nbrPlace.value || parseInt(elements.nbrPlace.value) < CONFIG.MIN_SEATS) {
					errors.push(`Number of seats must be at least ${CONFIG.MIN_SEATS}.`);
				}

				elements.errorMessages.innerHTML = "";
				if (errors.length > 0) {
					elements.errorMessages.innerHTML = errors.map((error) => `<p class='text-red-500'>${error}</p>`).join("");
					return false;
				}

				return true;
			},
		};

		const FormHandler = {
			submitForm(event) {
				if (!Validator.validateForm()) {
					event.preventDefault();
				}
			},
		};

		const init = () => {
			elements.form.addEventListener("submit", FormHandler.submitForm);
		};

		if (document.readyState === "loading") {
			document.addEventListener("DOMContentLoaded", init);
		} else {
			init();
		}

		return {
			validateForm: Validator.validateForm,
		};
	})();
    document.addEventListener("DOMContentLoaded", () => {
        const fromCurrencySelect = document.getElementById("fromCurrency");
        const toCurrencySelect = document.getElementById("toCurrency");
        const fromCurrencyValue = document.getElementById("fromCurrencyValue");
        const toCurrencyValue = document.getElementById("toCurrencyValue");
        const convertButton = document.getElementById("convertButton");
        const COUNTRY_CURRENCY_API = "https://aaapis.com/api/v1/info/country/";
		const EXCHANGE_API_KEY = "{{ app.request.server.get('EXCHANGE_API_KEY') }}";
    	const COUNTRY_CURRENCY_API_TOKEN = "{{ app.request.server.get('COUNTRY_CURRENCY_API_TOKEN') }}";

        async function fetchCurrencies() {
            const url = `https://v6.exchangerate-api.com/v6/${EXCHANGE_API_KEY}/codes`;

            try {
                const response = await fetch(url);
                if (!response.ok) {
                    console.error("Failed to get currency list: ", response.statusText);
                    return;
                }

                const data = await response.json();
                const currenciesArray = data.supported_codes;

                currenciesArray.forEach(currencyPair => {
                    const option = document.createElement("option");
                    option.value = currencyPair[0];
                    option.textContent = `${currencyPair[0]} - ${currencyPair[1]}`;
                    fromCurrencySelect.appendChild(option);
                });
            } catch (error) {
                console.error("Failed to fetch currencies: ", error);
            }
        }

        async function fetchCountryCurrencyCode(country) {
            const encodedCountry = encodeURIComponent(country);
            const url = COUNTRY_CURRENCY_API;
            const payload = JSON.stringify({ country: encodedCountry });

            try {
                const response = await fetch(url, {
                    method: "POST",
                    headers: {
                        "Authorization": `Token ${COUNTRY_CURRENCY_API_TOKEN}`,
                        "Content-Type": "application/json",
                    },
                    body: payload,
                });

                if (!response.ok) {
                    console.error("Request failed: ", response.statusText);
                    return null;
                }

                const data = await response.json();
                const currencyObject = data.currency;
                return currencyObject ? currencyObject.code : null;
            } catch (error) {
                console.error("Error fetching currency: ", error);
                return null;
            }
        }

        async function convertCurrency(amount, fromCurrency, toCurrency) {
            const url = `https://v6.exchangerate-api.com/v6/${EXCHANGE_API_KEY}/latest/${encodeURIComponent(fromCurrency)}`;

            try {
                const response = await fetch(url);
                if (!response.ok) {
                    console.error("Request failed: ", response.statusText);
                    return null;
                }

                const data = await response.json();
                const rates = data.conversion_rates;

                if (!rates[toCurrency]) {
                    console.error("Currency code not found: ", toCurrency);
                    return null;
                }

                return amount * rates[toCurrency];
            } catch (error) {
                console.error("Error converting currency: ", error);
                return null;
            }
        }

        async function initializeCurrencyConverter() {
            await fetchCurrencies();

            const destinationCurrencyCode = await fetchCountryCurrencyCode("{{ voyage.destination }}");
            if (destinationCurrencyCode) {
                const option = document.createElement("option");
                option.value = destinationCurrencyCode;
                option.textContent = destinationCurrencyCode;
                toCurrencySelect.appendChild(option);
                toCurrencySelect.value = destinationCurrencyCode;
            }
        }

        convertButton.addEventListener("click", async () => {
            const fromCurrency = fromCurrencySelect.value;
            const toCurrency = toCurrencySelect.value;
            const amountText = fromCurrencyValue.value;

            if (!fromCurrency || !toCurrency || !amountText) {
                toCurrencyValue.textContent = "Please enter valid values.";
                return;
            }

            try {
                const amount = parseFloat(amountText);
                if (isNaN(amount)) {
                    toCurrencyValue.textContent = "Invalid amount.";
                    return;
                }

                const convertedAmount = await convertCurrency(amount, fromCurrency, toCurrency);
                if (convertedAmount !== null) {
                    toCurrencyValue.textContent = `${convertedAmount.toFixed(2)} ${toCurrency}`;
                } else {
                    toCurrencyValue.textContent = "Conversion failed.";
                }
            } catch (error) {
                toCurrencyValue.textContent = "An error occurred.";
                console.error(error);
            }
        });

        initializeCurrencyConverter();
    });
</script>
{% endblock %}
