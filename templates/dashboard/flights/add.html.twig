{% extends 'base.html.twig' %} {% block title %}Add New Flight{% endblock %} {% block body %}
<div class="container py-5">
	<h1 class="display-4 fw-bold mb-4">Add New Flight</h1>
	<div class="row">
		<div class="col-md-12">
			<form method="post" action="{{ path('app_add_flight') }}" class="card shadow">
				<div class="card-body p-4">
					<div class="mb-3">
						<label for="titre" class="form-label">Title</label>
						<input type="text" id="titre" name="titre" class="form-control" />
					</div>
					<div class="mb-3">
						<label for="destination" class="form-label">Destination</label>
						<input type="text" id="destination" name="destination" class="form-control" />
					</div>
					<div class="mb-3">
						<label for="description" class="form-label">Description</label>
						<textarea id="description" name="description" rows="4" class="form-control"></textarea>
					</div>
					<div class="mb-3">
						<label for="prix" class="form-label">Price (â‚¬)</label>
						<input type="number" id="prix" name="prix" class="form-control" />
					</div>
					<div class="mb-3">
						<label for="placesDisponibles" class="form-label">Available Places</label>
						<input type="number" id="placesDisponibles" name="placesDisponibles" class="form-control" />
					</div>
					<div class="mb-3">
						<label for="dateDepart" class="form-label">Departure Date</label>
						<input type="date" id="dateDepart" name="dateDepart" class="form-control" />
					</div>
					<div class="mb-3">
						<label for="dateRetour" class="form-label">Return Date</label>
						<input type="date" id="dateRetour" name="dateRetour" class="form-control" />
					</div>
					<div class="d-flex justify-content-between mt-4">
						<button type="submit" class="btn btn-primary">Add Flight</button>
						<a href="{{ path('app_dashboard_flights') }}" class="btn btn-outline-secondary"> Cancel </a>
					</div>
				</div>
			</form>
		</div>
	</div>

	<div id="error-messages" class="mt-3">
		{% if errors is defined and errors|length > 0 %}
		<div class="alert alert-danger">
			{% for error in errors %}
			<p class="mb-0">{{ error }}</p>
			{% endfor %}
		</div>
		{% endif %}
	</div>
	<div id="success-messages" class="mt-3">
		{% if success is defined and success|length > 0 %}
		<div class="alert alert-success">
			{% for message in success %}
			<p class="mb-0">{{ message }}</p>
			{% endfor %}
		</div>
		{% endif %}
	</div>
</div>

<script>
	const FlightApp = (() => {
		const CONFIG = {
			MIN_TITLE_LENGTH: 3,
			MIN_DESCRIPTION_LENGTH: 10,
			MIN_PRICE: 0,
			MIN_PLACES: 1,
		};

		const elements = {
			titre: document.getElementById("titre"),
			destination: document.getElementById("destination"),
			description: document.getElementById("description"),
			prix: document.getElementById("prix"),
			placesDisponibles: document.getElementById("placesDisponibles"),
			dateDepart: document.getElementById("dateDepart"),
			dateRetour: document.getElementById("dateRetour"),
			errorMessages: document.getElementById("error-messages"),
			successMessages: document.getElementById("success-messages"),
			form: document.querySelector("form"),
		};

		const Validator = {
			validateForm() {
				const errors = [];

				if (!elements.titre.value.trim() || elements.titre.value.length < CONFIG.MIN_TITLE_LENGTH) {
					errors.push(`Title must be at least ${CONFIG.MIN_TITLE_LENGTH} characters long.`);
				}

				if (!elements.destination.value.trim()) {
					errors.push("Destination cannot be empty.");
				}

				if (!elements.description.value.trim() || elements.description.value.length < CONFIG.MIN_DESCRIPTION_LENGTH) {
					errors.push(`Description must be at least ${CONFIG.MIN_DESCRIPTION_LENGTH} characters long.`);
				}

				if (!elements.prix.value || parseFloat(elements.prix.value) < CONFIG.MIN_PRICE) {
					errors.push("Price must be a non-negative number.");
				}

				if (!elements.placesDisponibles.value || parseInt(elements.placesDisponibles.value) < CONFIG.MIN_PLACES) {
					errors.push("Available places must be at least 1.");
				}

				if (!elements.dateDepart.value) {
					errors.push("Departure date is required.");
				}

				if (!elements.dateRetour.value) {
					errors.push("Return date is required.");
				} else if (elements.dateDepart.value && elements.dateRetour.value < elements.dateDepart.value) {
					errors.push("Return date cannot be before departure date.");
				}

				elements.errorMessages.innerHTML = "";
				if (errors.length > 0) {
					const alertDiv = document.createElement("div");
					alertDiv.className = "alert alert-danger";
					alertDiv.innerHTML = errors.map((error) => `<p class="mb-0">${error}</p>`).join("");
					elements.errorMessages.appendChild(alertDiv);
					return false;
				}

				return true;
			},
		};

		const FormHandler = {
			submitForm(event) {
				if (!Validator.validateForm()) {
					event.preventDefault();
				}
			},
		};

		const init = () => {
			elements.form.addEventListener("submit", FormHandler.submitForm);
		};

		if (document.readyState === "loading") {
			document.addEventListener("DOMContentLoaded", init);
		} else {
			init();
		}

		return {
			validateForm: Validator.validateForm,
		};
	})();
</script>
{% endblock %}
