{% extends 'base.html.twig' %} {% block title %}Post Details{% endblock %} {% block body %}
<div class="container mx-auto mt-8">
	<h1 class="text-2xl font-bold mb-4">Post Details</h1>

	<div class="mb-6">
		<twig:Post
			post="{{ post }}"
			likesCount="{{ post.likesCount }}"
			dislikesCount="{{ post.dislikesCount }}"
			isLiked="{{ post.isLiked }}"
		/>
	</div>

	<a href="{{ path('app_forum') }}" class="text-blue-600 hover:underline">Back to Forum</a>
</div>
<script>
	const ForumApp = (() => {
		const CONFIG = {
			MAX_LENGTH: 255,
			MIN_POST_LENGTH: 15,
			MIN_COMMENT_LENGTH: 10,
		};

		const elements = {
			postText: document.getElementById("postText"),
			postLength: document.getElementById("postLength"),
			postErrorMessage: document.getElementById("postErrorMessage"),
			postForm: document.getElementById("postForm"),
			postImages: document.getElementById("imagePreviewContainer"),
		};

		const CharacterCounter = {
			/**
			 * Set up a character counter for a textarea
			 * @param {HTMLElement} textarea - The textarea element
			 * @param {HTMLElement} counter - The counter element
			 */
			setup(textarea, counter) {
				if (!textarea || !counter) return;
				counter.textContent = `${textarea.value.length}/${CONFIG.MAX_LENGTH}`;

				textarea.addEventListener("input", () => {
					if (textarea.value.length > CONFIG.MAX_LENGTH) {
						textarea.value = textarea.value.slice(0, CONFIG.MAX_LENGTH);
					}
					counter.textContent = `${textarea.value.length}/${CONFIG.MAX_LENGTH}`;
				});
			},

			initAll() {
				if (elements.postText && elements.postLength) {
					this.setup(elements.postText, elements.postLength);
				}

				document.querySelectorAll("textarea[id^='editTextarea-']").forEach((textarea) => {
					const id = textarea.id.split("editTextarea-")[1];
					const counter =
						document.getElementById(`editPostLength-${id}`) || document.getElementById(`commentLength-${id}`);

					if (counter) {
						this.setup(textarea, counter);
					}
				});

				document.querySelectorAll("textarea[name='commentText']").forEach((textarea) => {
					const form = textarea.closest("form");
					if (form) {
						const postId = form.querySelector("input[name='postId']")?.value;
						if (postId) {
							const counter = document.getElementById(`newCommentLength-${postId}`);
							if (counter) {
								this.setup(textarea, counter);
							}
						}
					}
				});
			},
		};

		const Validator = {
			/**
			 * Validate a comment form
			 * @param {HTMLFormElement} form - The comment form
			 * @returns {boolean} - Whether the form is valid
			 */
			async validateComment(form) {
				const textarea = form.querySelector("textarea[name='commentText']");
				if (!textarea) return false;

				const postId = form.querySelector("input[name='postId']")?.value;
				if (!postId) return false;

				const errorMessage = document.getElementById(`commentErrorMessage-${postId}`);
				if (!errorMessage) return false;

				const text = textarea.value.trim();

				if (text === "") {
					errorMessage.textContent = "Comment cannot be empty.";
					return false;
				}

				if (text.length < CONFIG.MIN_COMMENT_LENGTH) {
					errorMessage.textContent = `Comment must be at least ${CONFIG.MIN_COMMENT_LENGTH} characters.`;
					return false;
				}

				const isProfanity = await validateProfanity(text);
				if (isProfanity) {
					errorMessage.textContent = "Comment contains inappropriate language.";
					return false;
				}

				errorMessage.textContent = "";
				return true;
			},

			/**
			 * Validate an edited post form
			 * @param {HTMLFormElement} form - The edit post form
			 * @param {string} postId - The post ID
			 * @returns {boolean} - Whether the form is valid
			 */
			async validateEditPost(form, postId) {
				const textarea = form.querySelector(`#editTextarea-${postId}`);
				if (!textarea) return false;

				const errorMessage = document.getElementById(`editPostErrorMessage-${postId}`);
				if (!errorMessage) return false;

				const text = textarea.value.trim();

				if (text === "") {
					errorMessage.textContent = "Post cannot be empty.";
					return false;
				}

				if (text.length < CONFIG.MIN_POST_LENGTH) {
					errorMessage.textContent = `Post must be at least ${CONFIG.MIN_POST_LENGTH} characters.`;
					return false;
				}
				const isProfanity = await validateProfanity(text);
				if (isProfanity) {
					errorMessage.textContent = "Post contains inappropriate language.";
					return false;
				}
				errorMessage.textContent = "";
				return true;
			},

			/**
			 * Validate an edited comment form
			 * @param {HTMLFormElement} form - The edit comment form
			 * @param {string} commentId - The comment ID
			 * @returns {boolean} - Whether the form is valid
			 */
			async validateEditComment(form, commentId) {
				const textarea = form.querySelector(`#editTextarea-${commentId}`);
				if (!textarea) return false;

				const errorMessage = document.getElementById(`editCommentErrorMessage-${commentId}`);
				if (!errorMessage) return false;

				const text = textarea.value.trim();

				if (text === "") {
					errorMessage.textContent = "Comment cannot be empty.";
					return false;
				}

				if (text.length < CONFIG.MIN_COMMENT_LENGTH) {
					errorMessage.textContent = `Comment must be at least ${CONFIG.MIN_COMMENT_LENGTH} characters.`;
					return false;
				}
				const isProfanity = await validateProfanity(text);
				if (isProfanity) {
					errorMessage.textContent = "Comment contains inappropriate language.";
					return false;
				}
				errorMessage.textContent = "";
				return true;
			},
		};

		const FormHandler = {
			/**
			 * Submit an edited post if valid
			 * @param {HTMLFormElement} form - The edit post form
			 * @param {string} postId - The post ID
			 * @returns {boolean} - Whether the form is valid
			 */
			async submitEditPost(form, postId) {
				const isValid = await Validator.validateEditPost(form, postId);
				if (!isValid) {
					return;
				}

				const formData = new FormData(form);
				const url = form.getAttribute("action") || `{{ path('app_forum_edit', {'id': '0'}) }}`.replace("0", postId);

				htmx.ajax("POST", url, {
					source: form,
					target: `#postContent-${postId}`,
					swap: "outerHTML",
					values: Object.fromEntries(formData),
				});

				return false;
			},

			/**
			 * Submit an edited comment if valid
			 * @param {HTMLFormElement} form - The edit comment form
			 * @param {string} commentId - The comment ID
			 * @returns {boolean} - Whether the form is valid
			 */
			async submitEditComment(form, commentId) {
				const isValid = await Validator.validateEditComment(form, commentId);
				if (!isValid) {
					return;
				}

				const formData = new FormData(form);
				const url = form.getAttribute("action") || `{{ path('comment_edit', {'id': '0'}) }}`.replace("0", commentId);

				htmx.ajax("POST", url, {
					source: form,
					target: `#commentText-${commentId}`,
					swap: "outerHTML",
					values: Object.fromEntries(formData),
				});

				return false;
			},

			setupCommentForms() {
				document.querySelectorAll("form[hx-post*='app_forum_comment']").forEach((form) => {
					const postUrl = form.getAttribute("hx-post");
					const target = form.getAttribute("hx-target");
					const swap = form.getAttribute("hx-swap");

					form.removeAttribute("hx-post");
					form.removeAttribute("hx-target");
					form.removeAttribute("hx-swap");
					form.removeAttribute("hx-on::after-request");

					const submitBtn = form.querySelector('button[type="submit"]');
					if (!submitBtn) return;

					submitBtn.type = "button";
					submitBtn.addEventListener("click", () => {
						const isValid = await Validator.validateComment(form);
						if (!isValid) return;

						const formData = new FormData(form);
						htmx
							.ajax("POST", postUrl, {
								source: form,
								target: target,
								swap: swap,
								values: Object.fromEntries(formData),
							})
							.then(() => {
								form.reset();

								const textarea = form.querySelector('textarea[name="commentText"]');
								const postId = form.querySelector("input[name='postId']")?.value;
								if (textarea && postId) {
									const counter = document.getElementById(`newCommentLength-${postId}`);
									if (counter) counter.textContent = `0/${CONFIG.MAX_LENGTH}`;
								}
							});
					});
				});
			},
		};

		const UIHandler = {
			/**
			 * Toggle post editing UI
			 * @param {string} postId - The post ID
			 */
			togglePostEdit(postId) {
				const postContent = document.getElementById(`postContent-${postId}`);
				const editForm = document.getElementById(`editPostForm-${postId}`);
				const editTitle = document.getElementById(`editPostTitleForm-${postId}`);
				const editButton = document.getElementById(`editButton-${postId}`);
				if (postContent) postContent.style.display = "none";
				if (editForm) editForm.style.display = "block";
				if (editTitle) editTitle.style.display = "block";
				if (editButton) editButton.style.display = "none";
			},

			/**
			 * Toggle comment editing UI
			 * @param {string} commentId - The comment ID
			 */
			toggleCommentEdit(commentId) {
				const commentText = document.getElementById(`commentText-${commentId}`);
				const editForm = document.getElementById(`editCommentForm-${commentId}`);
				const editButton = document.getElementById(`editCommentButton-${commentId}`);

				if (commentText) commentText.style.display = "none";
				if (editForm) editForm.style.display = "block";
				if (editButton) editButton.style.display = "none";
			},
		};

		const ErrorHandler = {
			handleErrors(event) {
				try {
					const response = JSON.parse(event.detail.xhr.responseText);
					console.error("HTMX error response:", response);

					if (!response.error) return;

					const targetId = event.detail.target.id;
					let errorElement;

					if (targetId.startsWith("postText-")) {
						const postId = targetId.split("-")[1];
						errorElement = document.getElementById(`editPostErrorMessage-${postId}`);
					} else if (targetId.startsWith("commentText-")) {
						const commentId = targetId.split("-")[1];
						errorElement = document.getElementById(`editCommentErrorMessage-${commentId}`);
					} else if (targetId.startsWith("commentsContainer-")) {
						const postId = targetId.split("-")[1];
						errorElement = document.getElementById(`commentErrorMessage-${postId}`);
					}

					if (errorElement) {
						const errorMsg = Array.isArray(response.error) ? response.error.join(", ") : response.error;
						errorElement.textContent = errorMsg;
					}
				} catch (e) {
					console.error("Failed to parse error response:", e);
					console.error("Raw response:", event.detail.xhr.responseText);
				}
			},
		};

		const init = () => {
			CharacterCounter.initAll();

			FormHandler.setupCommentForms();

			document.addEventListener("htmx:responseError", ErrorHandler.handleErrors);

			document.addEventListener("htmx:afterSwap", () => {
				CharacterCounter.initAll();
				FormHandler.setupCommentForms();
			});
		};

		if (document.readyState === "loading") {
			document.addEventListener("DOMContentLoaded", init);
		} else {
			init();
		}

		return {
			submitEditPostIfValid: FormHandler.submitEditPost,
			submitEditCommentIfValid: FormHandler.submitEditComment,
			editPost: UIHandler.togglePostEdit,
			editComment: UIHandler.toggleCommentEdit,
			validateComment: Validator.validateComment,
		};
	})();

	/**
	 * Global function to validate comment form (called from inline onsubmit)
	 * @param {HTMLFormElement} form - The comment form
	 * @returns {boolean} - Whether the form is valid
	 */
	function validateCommentForm(form) {
		return ForumApp.validateComment(form);
	}

	async function handleAddCommentButtonClick(button) {
		if (!button || !button.form) {
			console.error("Button or form is undefined.");
			return;
		}

		const form = button.form;
		const isValid = await validateCommentForm(form);
		if (isValid) {
			htmx.trigger(form, "submit");
		}
	}

	async function validateProfanity(text) {
		if (!text) return false;
		if (text.length < 15) return false;
		if (text.length > 255) return false;

		const cachedResult = sessionStorage.getItem(`profanity_${btoa(text)}`);
		if (cachedResult !== null) return JSON.parse(cachedResult);

		try {
			const controller = new AbortController();
			const timeoutId = setTimeout(() => {
				controller.abort();
			}, 5000); // Increased timeout to 5 seconds

			const response = await fetch("https://vector.profanity.dev", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ message: text }),
				signal: controller.signal,
			});

			clearTimeout(timeoutId);

			if (!response.ok) {
				throw new Error("Failed to validate profanity");
			}

			const result = await response.json();
			sessionStorage.setItem(`profanity_${btoa(text)}`, JSON.stringify(result.isProfanity));
			return result.isProfanity;
		} catch (error) {
			console.error("Error validating profanity:", error);
			if (error.name === "AbortError") {
				console.error("Request timed out");
			}
			return false;
		}
	}
</script>
{% endblock %}
